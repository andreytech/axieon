// Function for converting a px based font-size to rem.
@function calculateRem($size) {
    $remSize: $size / 16px;
    //Default font size on html element is 100%, equivalent to 16px;
    @return #{$remSize}rem;
}

// Mixin that will include the fall back px declaration as well as the calculated rem value.
@mixin fontSize($size) {
    font-size: $size;
    font-size: calculateRem($size);
}

@mixin font-face($font-family, $file-path, $font-weight, $font-style) {
    @font-face {
        font-family: $font-family;
        src: url('#{$file-path}.eot');
        src: url('#{$file-path}.eot?#iefix') format('embedded-opentype'),
        url('#{$file-path}.woff') format('woff'),
        url('#{$file-path}.ttf') format('truetype'),
        url('#{$file-path}.svg##{$font-family}') format('svg');
        font-weight: $font-weight;
        font-style: $font-style;
    }

    // Chrome for Windows rendering fix: http://www.adtrak.co.uk/blog/font-face-chrome-rendering/
    @media screen and (-webkit-min-device-pixel-ratio: 0) {
        @font-face {
            font-family: $font-family;
            src: url('#{$file-path}.svg##{$font-family}') format('svg');
        }
    }
}

/*--------------------------------------------------------------
	Mixins
	--------------------------------------------------------------*/
/*
			Transition mixin
	*/
@mixin transition($transition...) {
    -moz-transition: $transition;
    -o-transition: $transition;
    -webkit-transition: $transition;
    transition: $transition;
}

@mixin transition-property($property...) {
    -moz-transition-property: $property;
    -o-transition-property: $property;
    -webkit-transition-property: $property;
    transition-property: $property;
}

@mixin transition-duration($duration...) {
    -moz-transition-property: $duration;
    -o-transition-property: $duration;
    -webkit-transition-property: $duration;
    transition-property: $duration;
}

@mixin transition-timing-function($timing...) {
    -moz-transition-timing-function: $timing;
    -o-transition-timing-function: $timing;
    -webkit-transition-timing-function: $timing;
    transition-timing-function: $timing;
}

@mixin transition-delay($delay...) {
    -moz-transition-delay: $delay;
    -o-transition-delay: $delay;
    -webkit-transition-delay: $delay;
    transition-delay: $delay;
}

/*
			Position Element Center
	*/
@mixin center-x-y() {
    position: absolute;
    left: 50%;
    top: 50%;
    -webkit-transform: translate(-50%, -50%);
    -moz-transform: translate(-50%, -50%);
    -o-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
}

@mixin center-y() {
    position: absolute;
    top: 50%;
    -webkit-transform: translateY(-50%);
    -moz-transform: translateY(-50%);
    -o-transform: translateY(-50%);
    transform: translateY(-50%);
}

@mixin center-x() {
    position: absolute;
    left: 50%;
    -webkit-transform: translateX(-50%);
    -moz-transform: translateX(-50%);
    -o-transform: translateX(-50%);
    transform: translateX(-50%);
}

//Word wraps
@mixin word-wrap() {
    overflow-wrap: break-word;
    word-wrap: break-word;
    -ms-word-break: break-all;
    word-break: break-all;
    word-break: break-word;
    -ms-hyphens: auto;
    -moz-hyphens: auto;
    -webkit-hyphens: auto;
    hyphens: auto;
}

@mixin ellipsis() {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
}

//Breakpoints
@mixin custom-bp($width) {
    @media (max-width: #{$width - 1px}) {
        @content;
    }
}

@mixin desktop {
    @media (max-width: #{$desktop - 1px}) {
        @content;
    }
}

@mixin tablet {
    @media (max-width: #{$tablet - 1px}) {
        @content;
    }
}

@mixin mini-tablet {
    @media (max-width: #{$mini-tablet - 1px}) {
        @content;
    }
}

@mixin mobile {
    @media (max-width: #{$mobile - 1px}) {
        @content;
    }
}

@mixin shadow($color) {
    box-shadow: 0 8px 25px 0 rgba($color, 0.5);
}

@mixin tooltip-color($t-color) {
    >.tooltip-inner {
        background: $t-color;
    }

    .bs-tooltip-auto[x-placement^=bottom] .arrow::before,
    .bs-tooltip-bottom .arrow::before {
        border-bottom-color: $t-color !important;
    }

    .bs-tooltip-auto[x-placement^=top] .arrow::before,
    .bs-tooltip-top .arrow::before {
        border-top-color: $t-color !important;
    }

    .bs-tooltip-auto[x-placement^=left] .arrow::before,
    .bs-tooltip-left .arrow::before {
        border-left-color: $t-color !important;
    }

    .bs-tooltip-auto[x-placement^=right] .arrow::before,
    .bs-tooltip-right .arrow::before {
        border-right-color: $t-color !important;
    }
}

@mixin placeholder-color($color) {
    &::-webkit-input-placeholder {
        /* WebKit browsers */
        color: $color;
    }

    &:-moz-placeholder {
        /* Mozilla Firefox 4 to 18 */
        color: $color;
    }

    &::-moz-placeholder {
        /* Mozilla Firefox 19+ */
        color: $color;
    }

    &:-ms-input-placeholder {
        /* Internet Explorer 10+ */
        color: $color;
    }
}

@mixin pattern-shape {

    z-index: 10;

    &:before,
    &:after {
        content: '';
        position: absolute;
        width: 294px;
        height: 294px;
        background: url('../../assets/images/pattern-shape.svg') no-repeat center center;
        background-size: cover;
        z-index: -1;
    }
}

@mixin section-bg-shape {
    background: #f7f7f8 url('../../assets/images/purpose-shapeleft.svg') no-repeat left bottom;

    &:before {
        content: '';
        position: absolute;
        right: 0;
        top: 0;
        background: url('../../assets/images/purpos-shaperight.svg') no-repeat right top;
        width: 100%;
        height: 100%;
    }
}